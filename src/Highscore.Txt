/*David Katz
 *June 15, 2018
 *Mr.Benum
 *This program is supposed to do all the reading and writing to a text file which holds the high scores for my game
 */
//libraries i imported so that I could have resources for my program to work
import java.awt.Color;
import java.awt.Font;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
public class Highscore 
{
	private static final File highscore = new File("TETRIS_HIGHSCORES.txt"); //names and initializes the variable for the creation of the high scores file
	private static int[] scores = new int[5]; //because there are 5 names there need to be 5 scores stored
	private static String[] names = new String[5]; //there will be 5 names stored in the high scores
	private static Font f = new Font("Times New Roman", Font.PLAIN, 20);//font i created to stay the same with the rest of the labels I use in my game
	public Highscore()
	{
		//creates TETRIS_HIGHSCORES.txt if it doesn't exist
		if (!highscore.exists())
		{
			try
			{
				highscore.createNewFile();
				//sets default names and scores to the newly created text file
				names[0] = "Dimitri";
				names[1] = "Vasya";
				names[2] = "Slavik";
				names[3] = "Vladim";
				names[4] = "Andrey";
				//gives it sample scores from 2000-6000
				for (int i = 0; i < 5; i++)
				{
					scores[i] = 6000 - i*1000;
				}
				//writes them to the file
				writeScore();
			}
			//if there is difficulty creating the file then there will be an error message
			catch(IOException e)
			{
				System.out.println("Couldn't create the file.");
			}
		}
		//UIManager sets JOptionPane's colors and font
		UIManager.put("OptionPane.background", Color.BLACK);
		UIManager.put("OptionPane.messageForeground", Color.MAGENTA);
		UIManager.put("OptionPane.font", f);
		UIManager.put("Panel.background",Color.BLACK);
	}
	/**
	 * DESC:writes to the high scores text file
	 * PRE: none
	 * POST: writes the names and scores of high scores to the high scores text file
	 */
	private static void writeScore()
	{
		try
		{
			FileWriter f = new FileWriter(highscore);
			BufferedWriter b = new BufferedWriter(f);
			b.write(names[0]);
			b.newLine();
			b.write(names[1]);
			b.newLine();
			b.write(names[2]);
			b.newLine();
			b.write(names[3]);
			b.newLine();
			b.write(names[4]);
			b.newLine();
			b.write(Integer.toString(scores[0]));
			b.newLine();
			b.write(Integer.toString(scores[1]));
			b.newLine();
			b.write(Integer.toString(scores[2]));
			b.newLine();
			b.write(Integer.toString(scores[3]));
			b.newLine();
			b.write(Integer.toString(scores[4]));
			b.close();
			f.close();
		}
		catch (IOException ex)
		{
			System.out.println("Couldn't write to the file.");
		}
	}
	/**
	 * DESC:sorts player's score with the other high scores
	 * PRE: player's score is higher than one or more high scores
	 * POST: writes over a previous high score with the players, shifts any lower scores down
	 */
	public void setScore(int score)
	{
		readScore();
		String name = null;
		String tempName = new String();
		int tempScore;
		//loops until player inputs a name at least 1 char long
		while (name == null || name.length()<1)
		{
			name = JOptionPane.showInputDialog(null, "You might have gotten a high score! Enter your name:", "Game Over", JOptionPane.PLAIN_MESSAGE);
			if (name == null) return; //if the user cancels name remains null and score will not be added
		}
		name = name.trim(); //removes spaces on either end of String
		//if the new score beats more than one high score, names and scores will be moved down the list
		if (score>scores[3])
		{
			for (int i = 3; i>=0; i--)
			{
				if (score>scores[i]){
					//names and scores are swapped using temporary names and scores
					tempName = names[i];
					names[i] = name;
					names[i+1] = tempName;
					tempScore = scores[i];
					scores[i] = score;
					scores[i+1] = tempScore;
				}
			}
		}
		//if the new score only beats the lowest high score, it is replaced
		else if (score>scores[4])
		{
			names[4] = name;
			scores[4] = score;
		}
		writeScore();
	}
	/**
	 * DESC:reads to the high scores text file
	 * PRE: none
	 * POST: names and scores from text file are stored in the new file
	 */
	private void readScore()
	{
		try
		{
			FileReader f = new FileReader(highscore);
			BufferedReader b = new BufferedReader(f);
			names[0] = b.readLine();
			names[1] = b.readLine();
			names[2]= b.readLine();
			names[3] = b.readLine();
			names[4] = b.readLine();
			scores[0] = Integer.parseInt(b.readLine());
			scores[1] = Integer.parseInt(b.readLine());
			scores[2] = Integer.parseInt(b.readLine());
			scores[3] = Integer.parseInt(b.readLine());
			scores[4] = Integer.parseInt(b.readLine());
			b.close();
			f.close();
		}
		catch (IOException ex)
		{
			System.out.println("Couldn't read the file.");
		}
	}
	/**
	 * DESC:displays high scores
	 * PRE: none
	 * POST: generated a table in a JOptionPane with the high scores
	 */
	public void displayScores()
	{
		readScore();
		//create table
		String[] columns = {"Name", "Score"};
		String[][] data = 
			{
					{names[0], Integer.toString(scores[0])},
					{names[1], Integer.toString(scores[1])},
					{names[2], Integer.toString(scores[2])},
					{names[3], Integer.toString(scores[3])},
					{names[4], Integer.toString(scores[4])}
			};
		JTable table = new JTable(data, columns);
		//sets table's appearance
		table.setBackground(Color.BLACK);
		table.setRowHeight(20);
		table.setShowHorizontalLines(false); //no borders
		table.setShowVerticalLines(false); //no borders
		table.setFont(f);
		table.setForeground(Color.MAGENTA);
		table.setEnabled(false); //disables editing of table by user
		//display output
		JOptionPane.showMessageDialog(null, table, "High Scores", JOptionPane.PLAIN_MESSAGE);
	}
	/**
	 * DESC:returns the scores array
	 * PRE: none
	 * POST: has access to scores
	 */
	public  int[] getScore()
	{
		return scores;
	}
	public static void main (String []args)
	{
		new Highscore();
	}
}